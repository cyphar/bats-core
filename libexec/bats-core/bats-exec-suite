#!/usr/bin/env bash
set -e

count_only_flag=''
extended_syntax_flag=''
filter=''
flags=()

while [[ "$#" -ne 0 ]]; do
  case "$1" in
  -c)
    count_only_flag=1
    ;;
  -f)
    shift
    filter="$1"
    flags+=('-f' "$filter")
    ;;
  -x)
    extended_syntax_flag='-x'
    flags+=('-x')
    ;;
  *)
    break
    ;;
  esac
  shift
done

trap 'kill 0; exit 1' int

all_tests=()
for filename in "$@"; do
  if  [[ ! -f "$filename" ]]; then
    printf 'bats: %s does not exist\n' "$filename" >&2
    exit 1
  fi

  test_names=()
  test_dupes=()
  while read -r line; do
    if [[ ! "$line" =~ ^bats_test_function\  ]]; then
      continue
    fi
    line="${line%$'\r'}"
    line="${line#* }"

    all_tests+=( "$(printf "%s\t%s" "$filename" "$line")" )
    if [[ " ${test_names[*]} " == *" $line "* ]]; then
      test_dupes+=("$line")
      continue
    fi
    test_names+=("$line")
  done < <(BATS_TEST_FILTER="$filter" bats-preprocess "$filename")

  if [[ "${#test_dupes[@]}" -ne 0 ]]; then
    printf 'bats warning: duplicate test name(s) in %s: %s\n' "$filename" "${test_dupes[*]}" >&2
  fi
done

if [[ -n "$count_only_flag" ]]; then
  printf '%d\n' "${#all_tests[@]}"
  exit
fi

status=0
printf '1..%d\n' "${#all_tests[@]}"

test_number=1
while IFS=$'\t' read -r filename test_name; do
  bats-exec-test "${flags[@]}" "$filename" "$test_name" "$test_number" || status=1
  ((++test_number))
done < <(printf '%s\n' "${all_tests[@]}" | grep -v '^$')
exit "$status"
